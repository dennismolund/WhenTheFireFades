@model Web.ViewModels.PlayViewModel
@{
    ViewData["Title"] = "Game In Progress";
}

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card bg-dark text-white">
                <div class="card-body">
                    <h2 class="card-title">Round @Model.CurrentRound?.RoundNumber</h2>
                    <p class="card-text">
                        <strong>Team Leader:</strong>
                        <span class="badge bg-warning text-dark">
                            @Model.CurrentLeader?.Nickname (Seat @Model.CurrentLeader?.Seat)
                        </span>
                    </p>
                    <p class="card-text">
                        <strong>Mission Status:</strong>
                        Success: @Model.Game.SuccessCount | Sabotage: @Model.Game.SabotageCount
                    </p>

                    <p class="card-text">
                <strong>⚠️ Rejected Proposals:</strong>
                <span class="badge @(Model.Game.ConsecutiveRejectedProposals >= 4 ? "bg-danger" : "bg-warning text-dark")">
                    @Model.Game.ConsecutiveRejectedProposals / 5
                </span>
                @if (Model.RemainingAttempts <= 2)
                {
                    <span class="text-danger ms-2">
                        <strong>Only @Model.RemainingAttempts attempt(s) remaining!</strong>
                    </span>
                }
            </p>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Your Role Card -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header @(Model.CurrentPlayer?.Role == Domain.Enums.PlayerRole.Human ? "bg-primary" : "bg-danger") text-white">
                    <h4>Your Role</h4>
                </div>
                <div class="card-body">
                    @if (Model.CurrentPlayer?.Role == Domain.Enums.PlayerRole.Human)
                    {
                        <h3 class="text-primary">👤 Human</h3>
                        <p>You are a loyal human. Your goal is to successfully complete missions and identify the shapeshifter.</p>
                        <div class="alert alert-info">
                            <strong>Mission:</strong> Help complete missions successfully!
                        </div>
                    }
                    else
                    {
                        <h3 class="text-danger">👾 Shapeshifter</h3>
                        <p>You are the shapeshifter. Your goal is to sabotage missions without being discovered.</p>
                        <div class="alert alert-warning">
                            <strong>Mission:</strong> Sabotage missions to win!
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Players List -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header bg-secondary text-white">
                    <h4>Players in Game</h4>
                </div>
                <div class="card-body">
                    <div class="list-group">
                        @foreach (var player in Model.Game.Players.OrderBy(p => p.Seat))
                        {
                            <div class="list-group-item d-flex justify-content-between align-items-center @(player.Seat == Model.CurrentLeader?.Seat ? "list-group-item-warning" : "")">
                                <div>
                                    <strong>@player.Nickname</strong>
                                    <span class="badge bg-secondary">Seat @player.Seat</span>
                                    @if (player.TempUserId == Model.CurrentPlayer?.TempUserId)
                                    {
                                        <span class="badge bg-info">You</span>
                                    }
                                    @if (player.Seat == Model.CurrentLeader?.Seat)
                                    {
                                        <span class="badge bg-warning text-dark">👑 Leader</span>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h4>
                        Current Phase: <span id="currentPhase">
                            @if (Model.IsTeamSelectionPhase)
                            {
                                <text>Team Selection</text>
                                @if (Model.CurrentAttemptNumber > 1)
                                {
                                    <span class="badge bg-warning text-dark ms-2">
                                        Attempt @Model.CurrentAttemptNumber
                                    </span>
                                }
                            }
                            else if (Model.IsVotingPhase)
                            {
                                <text>Team Voting</text>
                                <span class="badge bg-info ms-2">
                                    Attempt @Model.CurrentAttemptNumber
                                </span>
                            }
                            else if (Model.IsMissionPhase)
                            {
                                <text>Mission</text>
                            }
                        </span>
                    </h4>
                </div>
                <div class="card-body">
                    @if (Model.IsTeamSelectionPhase)
                    {
                        @if (Model.IsLeader)
                        {
                            <!-- LEADER: Team Selection -->
                            <div id="leaderView">
                                <div class="alert alert-warning">
                                    <strong>You are the team leader!</strong> Select @Model.CurrentRound?.TeamSize player(s) for this mission.
                                </div>

                                <form id="proposeTeamForm" asp-controller="Game" asp-action="ProposeTeam" method="post">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="code" value="@Model.Game.ConnectionCode" />

                                    <div class="mb-3">
                                        <h5>Select Team Members:</h5>
                                        <div id="teamSelection" class="list-group">
                                            @foreach (var player in Model.Game.Players.OrderBy(p => p.Seat))
                                            {
                                                <label class="list-group-item d-flex align-items-center">
                                                    <input class="form-check-input me-3"
                                                           type="checkbox"
                                                           name="selectedSeats"
                                                           value="@player.Seat"
                                                           data-team-size="@Model.CurrentRound?.TeamSize">
                                                    <div class="flex-grow-1">
                                                        <strong>@player.Nickname</strong>
                                                        <span class="badge bg-secondary">Seat @player.Seat</span>
                                                        @if (player.TempUserId == Model.CurrentPlayer?.TempUserId)
                                                        {
                                                            <span class="badge bg-info">You</span>
                                                        }
                                                    </div>
                                                </label>
                                            }
                                        </div>
                                    </div>

                                    <div class="alert alert-info" id="selectionInfo">
                                        Selected: <strong><span id="selectedCount">0</span> / @Model.CurrentRound?.TeamSize</strong>
                                    </div>

                                    <button type="submit" id="proposeTeamBtn" class="btn btn-success btn-lg w-100" disabled>
                                        Propose Team
                                    </button>
                                </form>
                            </div>
                        }
                        else
                        {
                            <!-- NON-LEADER: Waiting -->
                            <div id="nonLeaderView">
                                <div class="alert alert-info">
                                    <strong>@Model.CurrentLeader?.Nickname</strong> is selecting the team. Please wait...
                                </div>
                                <div class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Waiting...</span>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else if (Model.IsVotingPhase && Model.ProposedTeamMembers != null)
                    {
                        <!-- VOTING PHASE: All Players -->
                        <div id="teamVotingView">
                            <div class="alert alert-success">
                                <strong>@Model.CurrentLeader?.Nickname</strong> has proposed a team!
                            </div>

                            <h5>Proposed Team:</h5>
                            <div class="list-group mb-3">
                                @foreach (var member in Model.ProposedTeamMembers)
                                {
                                    <div class="list-group-item">
                                        <strong>@member.Nickname</strong>
                                        <span class="badge bg-secondary">Seat @member.Seat</span>
                                        @if (member.TempUserId == Model.CurrentPlayer?.TempUserId)
                                        {
                                            <span class="badge bg-info">You</span>
                                        }
                                    </div>
                                }
                            </div>

                            @if (Model.HasCurrentPlayerVoted)
                            {
                                <!-- Player has already voted -->
                                <div class="alert alert-info">
                                    <strong>You have voted.</strong> Waiting for other players...
                                </div>
                            }
                            else if (Model.IsLeader)
                            {
                                <!-- Leader doesn't vote -->
                                <div class="alert alert-warning">
                                    <strong>As the leader, you automatically approve this team.</strong> Waiting for others to vote...
                                </div>
                            }
                            else
                            {
                                <!-- Show voting buttons -->
                                <div class="alert alert-warning mb-3">
                                    <strong>Vote:</strong> Do you approve this team for the mission?
                                </div>
                                <div id="voteButtons" class="d-grid gap-2">
                                    <button class="btn btn-success btn-lg" id="voteApproveBtn">
                                        Approve Team
                                    </button>
                                    <button class="btn btn-danger btn-lg" id="voteRejectBtn">
                                        Reject Team
                                    </button>
                                </div>
                            }

                            

                            <!-- Vote Status -->
                            <div id="voteStatus" class="mt-3">
                                <h6>Votes Cast: @Model.TeamVotes?.Count / @(Model.Game.Players.Count - 1)</h6>
                                <div id="votesList" class="list-group">
                                    @if (Model.TeamVotes != null)
                                    {
                                        foreach (var vote in Model.TeamVotes)
                                        {
                                            var voter = Model.Game.Players.First(p => p.Seat == vote.Seat);
                                            <div class="list-group-item d-flex justify-content-between">
                                                <span><strong>@voter.Nickname</strong></span>
                                                <span class="badge @(vote.IsApproved ? "bg-success" : "bg-danger")">
                                                    @(vote.IsApproved ? "Approved" : "Rejected")
                                                </span>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else if (Model.IsMissionPhase)
                    {
                        <!-- MISSION PHASE: only Selected Team Players -->
                        <div id="missionView">
                            @if (Model.IsOnMissionTeam)
                            {
                                <div class="alert alert-success">
                                    <strong>You are on this mission!</strong> Make your choice secretly.
                                </div>

                                @if (Model.HasCurrentPlayerVoted)
                                {
                                    <!-- Player has already voted on Mission -->
                                    <div class="alert alert-info">
                                        <strong>You have voted.</strong> Waiting for other team members...
                                    </div>
                                }
                                else
                                {
                                    <!-- Show voting buttons for Mission -->
                                    <div class="alert alert-warning mb-3">
                                        <strong>Secret Vote:</strong> Do you help gather wood for the mission?
                                    </div>
                                    <div id="voteOnMissionButtons" class="d-grid gap-2">
                                        <button class="btn btn-success btn-lg" id="voteSuccessBtn">
                                            Gather Wood (Success)
                                        </button>
                                        @if (Model.CurrentPlayer?.Role == Domain.Enums.PlayerRole.Shapeshifter)
                                        {
                                            <button class="btn btn-danger btn-lg" id="voteSabotageBtn">
                                                Sabotage Mission
                                            </button>
                                        }
                                    </div>
                                    <small class="text-muted d-block mt-2">Your vote is secret and will not be revealed individually</small>
                                }
                            }
                            else
                            {
                                <!-- Not on mission team -->
                                <div class="alert alert-info">
                                    <strong>You are not on this mission.</strong> Waiting for the team to complete their task...
                                </div>
                                <div class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Waiting...</span>
                                    </div>
                                </div>
                            }

                            <!-- Show mission team -->
                            <div class="mt-3">
                                <h6>Mission Team:</h6>
                                <div class="list-group">
                                    @if (Model.ProposedTeamMembers != null)
                                    {
                                        @foreach (var member in Model.ProposedTeamMembers)
                                        {
                                            <div class="list-group-item">
                                                <strong>@member.Nickname</strong>
                                                <span class="badge bg-secondary">Seat @member.Seat</span>
                                                @if (member.TempUserId == Model.CurrentPlayer?.TempUserId)
                                                {
                                                    <span class="badge bg-info">You</span>
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                            </div>

                            <!-- Vote Status (show count without revealing choices) -->
                            <div class="mt-3" id="missionVoteStatus">
                                <h6>Team Members Voted: <span id="missionVoteCount">@(Model.MissionVotes?.Count ?? 0)</span> / @Model.ProposedTeamMembers?.Count</h6>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        gameCode = '@Model.Game.ConnectionCode';
        const tempUserId = @Model.CurrentPlayer?.TempUserId;
        const currentPlayerSeat = @Model.CurrentPlayer?.Seat;
        const isLeader = @Model.IsLeader.ToString().ToLower();
        const isVotingPhase = @Model.IsVotingPhase.ToString().ToLower();
        const isMissionPhase = @Model.IsMissionPhase.ToString().ToLower();
        const isTeamSelectionPhase = @Model.IsTeamSelectionPhase.ToString().ToLower();


        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/gameHub")
            .withAutomaticReconnect()
            .build();

        connection.on("NewLeaderSelected", function (data) {
            console.log("New leader selected:", data);
            showLeaderChange(data);
        });

        connection.on("TeamProposed", function () {
            console.log("Team proposed, reloading...");
            window.location.reload();
        });

        connection.on("PlayerVoted", function (data) {
            console.log("Player voted:", data);
            addVoteToList(data);
        });

        connection.on("TeamVoteResult", function (data) {
            console.log("Team vote result:", data);
            showVoteResult(data);
        });


        connection.on("MissionStarted", function () {
            console.log("Mission has started, reloading...");
            window.location.reload();
        });

        connection.on("MissionVoteSubmitted", function (data) {
            console.log("Mission vote submitted:", data);

            const voteCountSpan = document.getElementById('missionVoteCount');
            if (voteCountSpan) {
                const currentCount = parseInt(voteCountSpan.textContent);
                voteCountSpan.textContent = currentCount + 1;
            }
        });

        //Förstå hur jag ska starta denna efter resultatet är visat.
        connection.on("StartNextRound", function(){
            console.log("Starting next round, reloading...");
            setTimeout(() => window.location.reload(), 3000);

        });
        
        connection.on("GameEnded", function (data) {
            console.log("Game ended:", data);
            showGameEnd(data);
        });
        
        connection.start()
            .then(function () {
                console.log("Connected to game play hub");
                return connection.invoke("JoinGame", gameCode);
            })
            .catch(function (err) {
                console.error("Error connecting:", err);
            });

        if (isLeader && isTeamSelectionPhase) {
            const form = document.getElementById('proposeTeamForm');
            const checkboxes = form.querySelectorAll('input[type="checkbox"]');
            const proposeBtn = document.getElementById('proposeTeamBtn');
            const selectedCountSpan = document.getElementById('selectedCount');
            const teamSize = parseInt(checkboxes[0]?.dataset.teamSize || 2);

            function updateUI() {
                const selected = Array.from(checkboxes).filter(cb => cb.checked);
                selectedCountSpan.textContent = selected.length;
                proposeBtn.disabled = selected.length !== teamSize;
            }

            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const selected = Array.from(checkboxes).filter(cb => cb.checked);
                    if (selected.length > teamSize) {
                        this.checked = false;
                    }
                    updateUI();
                });
            });
        }

        //Vote on Team
        if (isVotingPhase && !isLeader) {
            const approveBtn = document.getElementById('voteApproveBtn');
            const rejectBtn = document.getElementById('voteRejectBtn');

            if (approveBtn) {
                approveBtn.onclick = () => vote(true);
            }
            if (rejectBtn) {
                rejectBtn.onclick = () => vote(false);
            }
        }

        //Vote on Team
        function vote(isApproved) {
            connection.invoke("VoteOnTeam", gameCode, isApproved)
                .then(() => {
                    document.getElementById('voteButtons').innerHTML =
                        '<div class="alert alert-info">You voted. Waiting for others...</div>';
                })
                .catch(err => console.error("Error voting:", err));
        }

        //Vote on Team
        function addVoteToList(data) {
            const votesList = document.getElementById('votesList');
            if (!votesList) return;

            const voteItem = document.createElement('div');
            voteItem.className = 'list-group-item d-flex justify-content-between';
            voteItem.innerHTML = `
                <span><strong>${data.playerNickname}</strong></span>
                <span class="badge ${data.isApproved ? 'bg-success' : 'bg-danger'}">
                    ${data.isApproved ? 'Approved' : 'Rejected'}
                </span>
            `;
            votesList.appendChild(voteItem);
        }

        //Mission Vote
        if (isMissionPhase) {
            const successBtn = document.getElementById('voteSuccessBtn');
            const sabotageBtn = document.getElementById('voteSabotageBtn');

            if (successBtn) {
                console.log("voted success");
                successBtn.onclick = () => missionVote(true);
            }
            if (sabotageBtn) {
                console.log("voted sabotage");
                sabotageBtn.onclick = () => missionVote(false);
            }
        }

        //Mission Vote
        function missionVote(isSuccess) {
            console.log("Mission vote called with:", isSuccess);
            connection.invoke("VoteOnMission", gameCode, isSuccess)
                .then(() => {
                    document.getElementById('voteOnMissionButtons').innerHTML =
                    '<div class="alert alert-info">You voted. Waiting for others...</div>';
                })
                .catch(err => console.error("Error voting:", err));
        }

        function showMissionResult(data) {
            const missionView = document.getElementById('missionView');
            if (!missionView) return;

            const resultDiv = document.createElement('div');
            resultDiv.className = `alert ${data.failVotes === 0 ? 'alert-success' : 'alert-danger'} mt-3`;

            resultDiv.innerHTML = `
                <h5>${data.failVotes === 0 ? '✓ Mission Successful!' : '✗ Mission Sabotaged!'}</h5>
                <p>Success Votes: ${data.successVotes} | Fail Votes: ${data.failVotes}</p>
                <p>Round ${data.roundNumber} complete. Loading next phase...</p>
            `;

            missionView.appendChild(resultDiv);

            // Reload after showing result
            setTimeout(() => window.location.reload(), 3000);

        }

        

        function showVoteResult(data) {
            const votingView = document.getElementById('teamVotingView');
            if (!votingView) return;

            const resultDiv = document.createElement('div');
            resultDiv.className = `alert ${data.voteIsApproved ? 'alert-success' : 'alert-danger'} mt-3`;

            if (data.voteIsApproved) {
                resultDiv.innerHTML = `
                    <h5>✓ Team Approved!</h5>
                    <p>Approvals: ${data.approvalCount} | Rejections: ${data.rejectionCount}</p>
                    <p>The mission will begin shortly...</p>
                `;
            } else {
                resultDiv.innerHTML = `
                    <h5>✗ Team Rejected!</h5>
                    <p>Approvals: ${data.approvalCount} | Rejections: ${data.rejectionCount}</p>
                    <p>A new leader will select a team...</p>
                `;
            }

            votingView.appendChild(resultDiv);

            // Reload after delay
            setTimeout(() => window.location.reload(), 3000);
        }

        function showLeaderChange(data) {
            const alert = document.createElement('div');
            alert.className = 'alert alert-warning position-fixed top-0 start-50 translate-middle-x mt-3';
            alert.style.zIndex = '9999';
            alert.innerHTML = `
                <h5>New Leader Selected!</h5>
                <p><strong>${data.newLeaderNickname}</strong> (Seat ${data.newLeaderSeat}) is now the team leader.</p>
                <p>Attempt ${data.attemptNumber} of 5 (${data.remainingAttempts} remaining)</p>
            `;
            document.body.appendChild(alert);

            setTimeout(() => window.location.reload(), 3000);
        }

        function showGameEnd(data) {
            const overlay = document.createElement('div');
            overlay.className = 'position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center';
            overlay.style.backgroundColor = 'rgba(0,0,0,0.8)';
            overlay.style.zIndex = '9999';
            overlay.innerHTML = `
                <div class="card text-center" style="max-width: 500px;">
                    <div class="card-header ${data.gameResult === 'ShapeshifterVictory' ? 'bg-danger' : 'bg-success'} text-white">
                        <h3>Game Over!</h3>
                    </div>
                    <div class="card-body">
                        <h4>${data.winner} Win!</h4>
                        <p>${data.reason}</p>
                        <a href="/" class="btn btn-primary mt-3">Return to Home</a>
                    </div>
                </div>
            `;
            document.body.appendChild(overlay);
        }



    </script>
}